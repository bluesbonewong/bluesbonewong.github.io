<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BluesboneW</title>
  
  <subtitle>Have Fun, Please</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-30T07:56:59.717Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>大汪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>e.target和e.currentTarget到底有什么不同</title>
    <link href="http://yoursite.com/2018/04/30/e-target%E5%92%8Ce-currentTarget%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C/"/>
    <id>http://yoursite.com/2018/04/30/e-target和e-currentTarget到底有什么不同/</id>
    <published>2018-04-30T07:55:06.000Z</published>
    <updated>2018-04-30T07:56:59.717Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>target</code>是被点击到的最里面的子元素，<code>currentTarget</code>是被监听的元素</p></blockquote><p>直接看代码，并自己测试http://js.jirengu.com/xegab/1/edit?html,css,js,output</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;target&lt;/code&gt;是被点击到的最里面的子元素，&lt;code&gt;currentTarget&lt;/code&gt;是被监听的元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接看代码，并自己测试
http://js.jirengu.com/xe
      
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="事件" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>移动端入门(响应式)</title>
    <link href="http://yoursite.com/2018/04/29/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/04/29/移动端入门/</id>
    <published>2018-04-29T12:26:39.000Z</published>
    <updated>2018-05-01T14:14:04.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1媒体查询"><a class="markdownIt-Anchor" href="#1媒体查询"></a> 1.媒体查询</h1><h2 id="11什么是媒体"><a class="markdownIt-Anchor" href="#11什么是媒体"></a> 1.1什么是媒体</h2><p>这个概念非常重要<br><strong>纸张</strong>，<strong>电脑</strong>，<strong>iPad</strong>，<strong>手机</strong>都是媒体，我们通过媒体查询可以获知用户在什么设备，从而写出针对性的css</p><h2 id="12具体用法"><a class="markdownIt-Anchor" href="#12具体用法"></a> 1.2具体用法</h2><blockquote><p>基础用法</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="comment">/*如果某个媒体满足宽度800px之上，那么css如下*/</span></span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fdf</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">600px</span>) and (max-width: <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="comment">/*如果某个媒体满足宽度在600-800px之间，那么css如下*/</span></span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">400px</span>)and (max-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="comment">/*如果某个媒体满足宽度在400-600px之间，那么css如下*/</span></span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: orange;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (max-width: <span class="number">400px</span>) &#123;</span><br><span class="line">  <span class="comment">/*如果某个媒体满足宽度在0-400px之间，那么css如下*/</span></span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常见用法 —— 与link结合</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">media</span>=<span class="string">"(max-width:600px)"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这句话的意思是：宽度在0-600之间才会使用这个样式文件--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>请注意：样式文件依然会下载</strong></p><h1 id="viewport"><a class="markdownIt-Anchor" href="#viewport"></a> viewport</h1><blockquote><p>980的历史</p></blockquote><p>把一个pc端页面在手机端展示，如果<strong>宽度 &lt;= 980</strong>，那么这个页面会等比缩小，超过这个范围，会出现滚动条<br><strong>就像是在在一个980px宽度的小屏幕里显示一样</strong><br>为了解决这个问题，有了<code>viewport</code></p><blockquote><p>viewport的作用 —— 控制页面在手机端<strong>不被缩放</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="移动端的特点"><a class="markdownIt-Anchor" href="#移动端的特点"></a> 移动端的特点</h1><h2 id="没有mouse事件没有hover事件没有resize没有滚动条只有touch"><a class="markdownIt-Anchor" href="#没有mouse事件没有hover事件没有resize没有滚动条只有touch"></a> 没有mouse事件，没有hover事件，没有resize，没有滚动条，只有touch</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent" target="_blank" rel="noopener">MDN触摸事件接口</a></p></blockquote><p>非常简单，一共有四个 —— <code>touchstart</code>,<code>touchmove</code>,<code>touchend</code>,<code>touchcancel</code></p><h2 id="用ontouchstart来判断是否支持touch事件"><a class="markdownIt-Anchor" href="#用ontouchstart来判断是否支持touch事件"></a> 用<code>ontouchstart</code>来判断是否支持touch事件</h2><p>我们在控制台输入<code>div.ontouchstart</code>可以看到<br>在<strong>移动端</strong>，其值为<code>null</code>；在<strong>pc端</strong>，其值为<code>undefined</code><br>我们可以利用这个来判断JavaScript是否支持touch事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.body.ontouchstart !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="comment">// code -&gt; Mobile</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// code -&gt; PC</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="touch事件的clientxy"><a class="markdownIt-Anchor" href="#touch事件的clientxy"></a> <code>touch</code>事件的<code>clientX/Y</code></h2><p>在pc端，<code>clientX/Y</code>我们直接可以通过<code>event.clientX</code>获得<br>但在<code>touch</code>事件中，我们获得的方式有些不一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = e.touches[<span class="number">0</span>].clientX</span><br><span class="line"><span class="keyword">let</span> y = e.touches[<span class="number">0</span>].clientY</span><br></pre></td></tr></table></figure><h2 id="touch事件的touchlist"><a class="markdownIt-Anchor" href="#touch事件的touchlist"></a> <code>touch</code>事件的<code>TouchList</code></h2><p>为什么会有<code>TouchList</code>？<br>因为手机端<strong>支持多个手指触控</strong></p><h2 id="移动端阻止页面滑动"><a class="markdownIt-Anchor" href="#移动端阻止页面滑动"></a> 移动端阻止页面滑动</h2><p>在相应的事件里使用<code>e.preventDefault</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1媒体查询&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1媒体查询&quot;&gt;&lt;/a&gt; 1.媒体查询&lt;/h1&gt;
&lt;h2 id=&quot;11什么是媒体&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11什么是媒体&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="移动端" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出vue系列(一)从jQuery到MVVM</title>
    <link href="http://yoursite.com/2018/04/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAvue%E7%B3%BB%E5%88%97(%E4%B8%80)%E4%BB%8EjQuery%E5%88%B0MVVM/"/>
    <id>http://yoursite.com/2018/04/27/深入浅出vue系列(一)从jQuery到MVVM/</id>
    <published>2018-04-27T07:00:36.000Z</published>
    <updated>2018-04-27T11:00:34.075Z</updated>
    
    <content type="html"><![CDATA[<h1>1.库与框架的区别</h1><h2>1.1下面，我们先看一个<code>todolist</code>用jQuery和Vue实现的过程</h2><blockquote><p>jQuery是一个DOM操作库，其核心就是通过JavaScript大量地操作了DOM结构<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt-title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-submit"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>&lt;!-- more --&gt;<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> $inputNode = $(<span class="string">'#txt-title'</span>)</span><br><span class="line">  <span class="keyword">let</span> $btnNode = $(<span class="string">'#btn-submit'</span>)</span><br><span class="line">  <span class="keyword">let</span> $ulListContainer = $(<span class="string">'#ul-list'</span>)</span><br><span class="line"></span><br><span class="line">  $btnNode.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val = $inputNode.val()</span><br><span class="line">    <span class="keyword">if</span> (!val) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> $li = $(<span class="string">'&lt;li&gt;'</span> + val + <span class="string">'&lt;/li&gt;'</span>)</span><br><span class="line"></span><br><span class="line">    $ulListContainer.append($li)</span><br><span class="line">    $inputNode.val(<span class="string">''</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Vue的DOM结构和其数据息息相关，但在script没有任何操作DOM的行为<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      title: <span class="string">''</span>,</span><br><span class="line">      list: []</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.title)</span><br><span class="line">        <span class="keyword">this</span>.title = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2>1.2jQuery和Vue的区别是什么</h2><blockquote><p><code>数据和视图的分离</code>，<code>以数据驱动视图，只关心数据变化，DOM操作被框架封装</code></p></blockquote><p>在<code>jQuery</code>里，我们可以很明显看出，<strong>她的数据和视图是<code>不分离</code>的</strong>，最典型的就是<code>&lt;ul id=&quot;ul-list&quot;&gt;&lt;/ul&gt;</code>标签内的<code>li</code>不是在HTML里写好的，而是通过JavaScript操作DOM得来的，<strong>也就是说在<code>jQuery</code>中，<code>JavaScript</code>可以随意地修改<code>DOM结构</code></strong>在<code>Vue</code>里，我们也可以很明显的看出，<strong>她的数据和结构是<code>分离</code>的</strong>，在script里，只有数据【也就是<code>data</code>】，一切的代码也只能够修改数据，是无法直接修改DOM的，只能通过修改数据修改DOM</p><h2>1.3MVVM是什么？</h2><h3>1.3.1首先你要知道什么是MVC</h3><blockquote><p>关于MVC的基础知识，推荐你去<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">看阮一峰老师的文章</a></p></blockquote><p>现在，你需要知道M、V、C三个字母的意义M —— <code>Model</code>代表<strong>数据源</strong>V —— <code>View</code>代表<strong>视图结构</strong>C —— <code>Controller</code>代表<strong>业务逻辑</strong></p><h3>1.3.2好了，下面我们结合Vue聊聊MVVM</h3><p>M —— <code>Model</code>代表<strong>数据源</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  title: <span class="string">''</span>,</span><br><span class="line">  list: []</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>V —— <code>View</code>代表<strong>视图结构</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>VM —— <code>ViewModel</code>代表<strong>View和Model之间的连接桥</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.title)</span><br><span class="line">        <span class="keyword">this</span>.title = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>Model</code>通过<code>ViewModel</code>对<code>View</code>进行了数据绑定</p></blockquote><p>比如你修改data，View会做出相应的变化</p><blockquote><p><code>View</code>通过<code>ViewModel</code>对<code>Model</code>进行了事件监听</p></blockquote><p>比如你在View里，可以监听click事件<img src="https://upload-images.jianshu.io/upload_images/6519022-b42f7711343d00d4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="MVVM解析"></p><h2>1.4 Vue的三要素</h2><blockquote><p>这里只是简单的提一下，后续博客我会详细解读</p></blockquote><ol><li><strong>响应式</strong> —— vue如何监听到data的变化【这样才能在修改data的同时改变View】</li><li><strong>模板引擎</strong> —— vue的模板如何被解析，指令如何被处理</li><li><strong>渲染</strong> —— vue的模板如何被渲染成HTML以及渲染过程</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;1.库与框架的区别&lt;/h1&gt;
&lt;h2&gt;1.1下面，我们先看一个&lt;code&gt;todolist&lt;/code&gt;用jQuery和Vue实现的过程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;jQuery是一个DOM操作库，其核心就是通过JavaScript大量地操作了DOM结构
&lt;
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>前端面试每日一题【更新至第五天】</title>
    <link href="http://yoursite.com/2018/04/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%90%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%E3%80%82%E3%80%82%E3%80%82%E3%80%91/"/>
    <id>http://yoursite.com/2018/04/26/前端面试每日一题【不断更新中。。。】/</id>
    <published>2018-04-26T13:59:47.000Z</published>
    <updated>2018-05-01T13:11:40.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一天2018-04-26"><a class="markdownIt-Anchor" href="#第一天2018-04-26"></a> 第一天：2018-04-26</h2><h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3><blockquote><p>写一个execTime，参数：事件毫秒数，作用：什么都不做，但函数执行会耗时参数传递的毫秒数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTime</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 补全代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>) <span class="comment">// 输出1</span></span><br><span class="line">execTime(<span class="number">3000</span>) <span class="comment">// 运行三秒钟</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>) <span class="comment">// 三秒钟之后输出2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="答案"><a class="markdownIt-Anchor" href="#答案"></a> 答案</h3><blockquote><p>JavaScript没有阻塞，所以思路就是使用一个<code>循环</code>强行阻塞</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTime</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">// getTime 让date转化为时间戳</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &lt; endTime + t) &#123;</span><br><span class="line">    <span class="comment">// 当前时间 小于 结束时间+t</span></span><br><span class="line">    <span class="comment">// 就会一直在循环</span></span><br><span class="line">    <span class="comment">// 从而实现了强制阻塞</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二天2018-04-27"><a class="markdownIt-Anchor" href="#第二天2018-04-27"></a> 第二天：2018-04-27</h2><h3 id="题目-2"><a class="markdownIt-Anchor" href="#题目-2"></a> 题目</h3><blockquote><p>写一个execTime，参数t：事件毫秒数，参数callback：回调函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTime</span>(<span class="params">t, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 补全代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">execTime(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 执行结果为：立即输出1和2，3秒后输出3</span></span><br></pre></td></tr></table></figure><h3 id="答案-2"><a class="markdownIt-Anchor" href="#答案-2"></a> 答案</h3><blockquote><p>这题应该是相当简单了，一看就是<code>异步</code>，又有一个回调，肯定使用setTimeout</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTime</span>(<span class="params">t, callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(callback, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三天2018-04-28"><a class="markdownIt-Anchor" href="#第三天2018-04-28"></a> 第三天：2018-04-28</h2><h3 id="题目-3"><a class="markdownIt-Anchor" href="#题目-3"></a> 题目</h3><blockquote><p>用js写出一个对象obj，使得obj.obj.obj === obj，也就是说不管出现过少次<code>.obj</code>，都得到obj</p></blockquote><h3 id="答案-3"><a class="markdownIt-Anchor" href="#答案-3"></a> 答案</h3><blockquote><p>核心知识点有两个，一个是<code>引用类型的内存指向问题</code>，一个是<code>迭代问题</code>，注意<code>obj.obj = obj</code>执行后，<strong>原本obj指向的内存空间被改变了</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// obj =&gt; &#123;a: 1&#125;</span></span><br><span class="line">obj.obj = obj</span><br></pre></td></tr></table></figure><p><strong>伪代码，描述 <code>obj</code> 被改变后的内存空间</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  obj: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    obj: &#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      obj: &#123;</span><br><span class="line">        <span class="comment">// 省略</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四天2018-04-29"><a class="markdownIt-Anchor" href="#第四天2018-04-29"></a> 第四天：2018-04-29</h2><h3 id="题目-4"><a class="markdownIt-Anchor" href="#题目-4"></a> 题目</h3><blockquote><p>写一个函数fn，使得fn满足以下条件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.fn() === fn</span><br><span class="line">2.fn.fn === fn</span><br></pre></td></tr></table></figure><h3 id="答案-4"><a class="markdownIt-Anchor" href="#答案-4"></a> 答案</h3><blockquote><p>关键在于<code>函数的return值</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line">fn.fn = fn</span><br></pre></td></tr></table></figure><h2 id="第五天2018-04-30"><a class="markdownIt-Anchor" href="#第五天2018-04-30"></a> 第五天：2018-04-30</h2><h3 id="题目-5"><a class="markdownIt-Anchor" href="#题目-5"></a> 题目</h3><blockquote><p>写一个函数fn，使得fn满足以下条件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn() <span class="comment">// 打印出'a'</span></span><br><span class="line">fn()() <span class="comment">// 打印出'b'</span></span><br><span class="line">fn()()() <span class="comment">// 打印出'c'</span></span><br></pre></td></tr></table></figure><h3 id="答案-5"><a class="markdownIt-Anchor" href="#答案-5"></a> 答案</h3><blockquote><p>fn作用域内的console.log肯定是要执行的，所以我们可以让这个console.log异步执行，让fn()和fn()()去改变fn作用域的变量的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> variable = <span class="string">'a'</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(variable)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    variable = <span class="string">'b'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      variable = <span class="string">'c'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一天2018-04-26&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一天2018-04-26&quot;&gt;&lt;/a&gt; 第一天：2018-04-26&lt;/h2&gt;
&lt;h3 id=&quot;题目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目&quot;&gt;&lt;/a&gt; 题目&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;写一个execTime，参数：事件毫秒数，作用：什么都不做，但函数执行会耗时参数传递的毫秒数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execTime&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;t&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 补全代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 输出1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;execTime(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 运行三秒钟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 三秒钟之后输出2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>极速入门Canvas(一)基本图形的绘制</title>
    <link href="http://yoursite.com/2018/04/25/Canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://yoursite.com/2018/04/25/Canvas学习笔记(一)/</id>
    <published>2018-04-25T14:16:47.000Z</published>
    <updated>2018-04-29T08:01:11.944Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;!-- more --&gt;</p><h2>canvas基础知识梗概</h2><p>以鼠标为例，我们只要知道<code>什么时候按下去</code>，<code>什么时候动</code>，<code>什么时候松开</code>就可以判断出用户是否在画画</p><p>使用<code>onmousedown</code>判断什么时候按下去使用<code>onmousemove</code>判断什么时候动 —— 有bug，移动速度过快会跟不上[用canvas的两点之间连线]使用<code>onmouseup</code>判断什么时候松开&lt;!-- more --&gt;</p><blockquote><p>我们先用JavaScript模拟出Canvas的效果</p></blockquote><h2>canvas基础知识梗概</h2><ol><li>&lt;canvas&gt; 看起来和 &lt;img&gt; 元素很相像</li><li>为了在 Canvas 上绘制图形，我们使用一个JavaScript上下文对象，它能动态创建图像（ creates graphics on the fly）getContext() 的方法是用来获得渲染上下文和它的绘画功能，getContext()只有一个参数——上下文的格式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>)</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2>canvas基础API学习法</h2><blockquote><p>一个画面的形成说白了就是两点。一是<code>画布</code>，二就是<code>点线面</code>，下面我们通过这两大方面来学习canvas的API</p></blockquote><h2>画布大小如何控制</h2><p>Canvas 的画布默认大小为300像素×150像素请使用使用HTML的width和height属性为&lt;canvas&gt;明确规定画布宽高，而不是使用CSS，否则图形会扭曲<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"tutorial"</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>用js获取用户的屏幕宽高，动态加载到HTML上</p><h2>点</h2><h2>线</h2><p>context.lineTo()ctx.lineWidth = xxx  设置线的宽度</p><h3>矩形相关API</h3><p>HTML中的元素canvas只支持一种原生的图形绘制：矩形。所有其他的图形的绘制都至少需要生成一条路径。</p><p>fillRect(x, y, width, height)绘制一个填充的矩形strokeRect(x, y, width, height)绘制一个矩形的边框clearRect(x, y, width, height)清除指定矩形区域的<code>填充部分</code>，让清除部分完全透明以上的三个函数绘制之后会马上显现在canvas上，即时生效。</p><h3>路径相关API</h3><blockquote><p>图形的基本元素是路径——路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合</p></blockquote><ol><li>首先，你需要创建路径起始点。</li><li>然后你使用画图命令去画出路径。</li><li>之后你把路径封闭。</li><li>一旦路径生成，你就能通过描边或填充路径区域来渲染图形。</li></ol><h4>基础API</h4><p>除了矩形外，所以图形绘制的开始和结束都要遵循以下两个步骤<strong>开始</strong>beginPath()新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径<strong>结束</strong>closePath()闭合路径之后图形绘制命令又重新指向到上下文中。stroke() —— 包含closePath()通过线条来绘制图形轮廓 —— 相当于<code>border</code>fill() —— 包含closePath()通过填充路径的内容区域生成实心的图形 —— 相当于<code>background</code></p><h4>核心API</h4><p>moveTo(x, y)将笔触移动到指定的坐标x以及y上。类似于抬笔到另一点</p><h4>圆弧</h4><p>arc(x, y, radius, startAngle, endAngle, anticlockwise)画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。注意：arc()函数中的角度单位是弧度，不是度数。角度与弧度的js表达式:<strong>radians=(Math.PI/180) * degrees</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;canvas基础知识梗概&lt;/h2&gt;
&lt;p&gt;以鼠标为例，我们只要知道&lt;code&gt;什么时候按下去&lt;/code&gt;，&lt;code&gt;什么时候动&lt;/code&gt;，&lt;code&gt;什么时候松开&lt;/code&gt;就可以判断出用户是否在画画&lt;/p&gt;
      
    
    </summary>
    
      <category term="Canvas" scheme="http://yoursite.com/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="http://yoursite.com/tags/Canvas/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>浅析Vue中computed与method的区别</title>
    <link href="http://yoursite.com/2018/04/25/%E6%B5%85%E6%9E%90Vue%E4%B8%ADcomputed%E4%B8%8Emethod%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/04/25/浅析Vue中computed与method的区别/</id>
    <published>2018-04-24T18:13:57.719Z</published>
    <updated>2018-04-24T18:13:57.719Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实官方文档对这个已经说的很清楚了，笔者不过是在其基础上进行归纳总结，各位看官还是先去<a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">读一下官方文档</a>吧</p></blockquote><h2>1.computed区别于method的两个核心</h2><p>在官方文档中，强调了computed区别于method最重要的两点</p><ol><li>computed是<strong>属性调用</strong>，而methods是<strong>函数调用</strong></li><li>computed带有<strong>缓存功能</strong>，而methods不是OK，下面我们看一个具体的例子&lt;!-- more --&gt;<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>&#123;&#123;methodTest&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test2-1"</span>&gt;</span>&#123;&#123;methodTest()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test2-2"</span>&gt;</span>&#123;&#123;methodTest()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test2-3"</span>&gt;</span>&#123;&#123;methodTest()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test3-1"</span>&gt;</span>&#123;&#123;computedTest&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test3-2"</span>&gt;</span>&#123;&#123;computedTest&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--script部分--&gt;</span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'我是消息，'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    methodTest() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message + <span class="string">'现在我用的是methods'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    computedTest() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message + <span class="string">'现在我用的是computed'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2>2. computed的属性调用</h2><p>细心的朋友可能已经发现了，在<code>HTML</code>的插值里</p><ol><li>computed定义的方法我们是以属性访问的形式调用的<code>computedTest</code></li><li>但是methods定义的方法，我们必须要加上<code>()</code>来调用，如<code>methodTest()</code>，<strong>否则，视图会出现<code>test1</code>的情况</strong>，见下图<img src="https://segmentfault.com/img/bV8UtL" alt="clipboard.png"></li></ol><h2>3. computed的缓存功能</h2><p>首先，我们要明白<strong>缓存</strong>究竟有什么用？相比大家都知道<code>HTTP缓存</code>，其核心作用就是<strong>对一些服务端未更新的资源进行复用，避免一些无谓的请求，优化了用户的体验</strong></p><blockquote><p>对于computed也是一样的：</p></blockquote><p>在上面的例子中，<code>methods</code>定义的方法是以<strong>函数调用</strong>的形式来访问的，那么<code>test2-1,test2-2,test2-3</code>是<strong>反复地将<code>methodTest</code>方法运行了三遍</strong>，如果我们碰到一个场景，需要1000个<code>methodTest的返回值</code>，那么毫无疑问，这势必造成大量的<strong>浪费</strong>更恐怖的是，如果你更改了message的值，那么这1000个<code>methodTest</code>方法每一个又会重新计算。。。。</p><p>所以，官方文档才反复强调<strong>对于任何复杂逻辑，你都应当使用<code>计算属性</code></strong></p><blockquote><p><strong>computed依赖于data中的数据，只有在它的相关依赖数据发生改变时才会重新求值</strong></p></blockquote><p>如上例，在Vue实例化的时候，computed定义computedTest方法会做一次计算，返回一个值，<strong>在随后的代码编写中，只要<code>computedTest方法</code>依赖的<code>message数据</code>不发生改变，<code>computedTest方法</code>是不会重新计算的</strong>，也就是说<code>test3-1,test3-2</code>是直接拿到了<strong>返回值</strong>，而非是computedTest方法重新计算的结果。</p><p>这样的好处也是显而易见的，同样的，如果我们碰到一个场景，需要1000个<code>computedTest的返回值</code>，那么毫无疑问，这相对于<code>methods</code>而言，将大大地节约内存哪怕你改变了message的值，<code>computedTest</code>也只会计算一次而已</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;其实官方文档对这个已经说的很清楚了，笔者不过是在其基础上进行归纳总结，各位看官还是先去&lt;a href=&quot;https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="computed" scheme="http://yoursite.com/tags/computed/"/>
    
  </entry>
  
</feed>
