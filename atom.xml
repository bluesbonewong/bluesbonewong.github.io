<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BluesboneW</title>
  
  <subtitle>Have Fun, Please</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-27T11:00:34.075Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>大汪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入浅出vue系列(一)从jQuery到MVVM</title>
    <link href="http://yoursite.com/2018/04/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAvue%E7%B3%BB%E5%88%97(%E4%B8%80)%E4%BB%8EjQuery%E5%88%B0MVVM/"/>
    <id>http://yoursite.com/2018/04/27/深入浅出vue系列(一)从jQuery到MVVM/</id>
    <published>2018-04-27T07:00:36.000Z</published>
    <updated>2018-04-27T11:00:34.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1库与框架的区别"><a class="markdownIt-Anchor" href="#1库与框架的区别"></a> 1.库与框架的区别</h1><h2 id="11下面我们先看一个todolist用jquery和vue实现的过程"><a class="markdownIt-Anchor" href="#11下面我们先看一个todolist用jquery和vue实现的过程"></a> 1.1下面，我们先看一个<code>todolist</code>用jQuery和Vue实现的过程</h2><blockquote><p>jQuery是一个DOM操作库，其核心就是通过JavaScript大量地操作了DOM结构</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt-title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-submit"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> $inputNode = $(<span class="string">'#txt-title'</span>)</span><br><span class="line">  <span class="keyword">let</span> $btnNode = $(<span class="string">'#btn-submit'</span>)</span><br><span class="line">  <span class="keyword">let</span> $ulListContainer = $(<span class="string">'#ul-list'</span>)</span><br><span class="line"></span><br><span class="line">  $btnNode.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val = $inputNode.val()</span><br><span class="line">    <span class="keyword">if</span> (!val) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> $li = $(<span class="string">'&lt;li&gt;'</span> + val + <span class="string">'&lt;/li&gt;'</span>)</span><br><span class="line"></span><br><span class="line">    $ulListContainer.append($li)</span><br><span class="line">    $inputNode.val(<span class="string">''</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Vue的DOM结构和其数据息息相关，但在script没有任何操作DOM的行为</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      title: <span class="string">''</span>,</span><br><span class="line">      list: []</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.title)</span><br><span class="line">        <span class="keyword">this</span>.title = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12jquery和vue的区别是什么"><a class="markdownIt-Anchor" href="#12jquery和vue的区别是什么"></a> 1.2jQuery和Vue的区别是什么</h2><blockquote><p><code>数据和视图的分离</code>，<code>以数据驱动视图，只关心数据变化，DOM操作被框架封装</code></p></blockquote><p>在<code>jQuery</code>里，我们可以很明显看出，<strong>她的数据和视图是<code>不分离</code>的</strong>，最典型的就是<code>&lt;ul id=&quot;ul-list&quot;&gt;&lt;/ul&gt;</code>标签内的<code>li</code>不是在HTML里写好的，而是通过JavaScript操作DOM得来的，<strong>也就是说在<code>jQuery</code>中，<code>JavaScript</code>可以随意地修改<code>DOM结构</code></strong><br>在<code>Vue</code>里，我们也可以很明显的看出，<strong>她的数据和结构是<code>分离</code>的</strong>，在script里，只有数据【也就是<code>data</code>】，一切的代码也只能够修改数据，是无法直接修改DOM的，只能通过修改数据修改DOM</p><h2 id="13mvvm是什么"><a class="markdownIt-Anchor" href="#13mvvm是什么"></a> 1.3MVVM是什么？</h2><h3 id="131首先你要知道什么是mvc"><a class="markdownIt-Anchor" href="#131首先你要知道什么是mvc"></a> 1.3.1首先你要知道什么是MVC</h3><blockquote><p>关于MVC的基础知识，推荐你去<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">看阮一峰老师的文章</a></p></blockquote><p>现在，你需要知道M、V、C三个字母的意义<br>M —— <code>Model</code>代表<strong>数据源</strong><br>V —— <code>View</code>代表<strong>视图结构</strong><br>C —— <code>Controller</code>代表<strong>业务逻辑</strong></p><h3 id="132好了下面我们结合vue聊聊mvvm"><a class="markdownIt-Anchor" href="#132好了下面我们结合vue聊聊mvvm"></a> 1.3.2好了，下面我们结合Vue聊聊MVVM</h3><p>M —— <code>Model</code>代表<strong>数据源</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  title: <span class="string">''</span>,</span><br><span class="line">  list: []</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>V —— <code>View</code>代表<strong>视图结构</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>VM —— <code>ViewModel</code>代表<strong>View和Model之间的连接桥</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.title)</span><br><span class="line">        <span class="keyword">this</span>.title = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Model</code>通过<code>ViewModel</code>对<code>View</code>进行了数据绑定</p></blockquote><p>比如你修改data，View会做出相应的变化</p><blockquote><p><code>View</code>通过<code>ViewModel</code>对<code>Model</code>进行了事件监听</p></blockquote><p>比如你在View里，可以监听click事件<br><img src="https://upload-images.jianshu.io/upload_images/6519022-b42f7711343d00d4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="MVVM解析"></p><h2 id="14-vue的三要素"><a class="markdownIt-Anchor" href="#14-vue的三要素"></a> 1.4 Vue的三要素</h2><blockquote><p>这里只是简单的提一下，后续博客我会详细解读</p></blockquote><ol><li><strong>响应式</strong> —— vue如何监听到data的变化【这样才能在修改data的同时改变View】</li><li><strong>模板引擎</strong> —— vue的模板如何被解析，指令如何被处理</li><li><strong>渲染</strong> —— vue的模板如何被渲染成HTML以及渲染过程</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1库与框架的区别&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1库与框架的区别&quot;&gt;&lt;/a&gt; 1.库与框架的区别&lt;/h1&gt;
&lt;h2 id=&quot;11下面我们先看一个todolist用jquery和vue实现的过程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11下面我们先看一个todolist用jquery和vue实现的过程&quot;&gt;&lt;/a&gt; 1.1下面，我们先看一个&lt;code&gt;todolist&lt;/code&gt;用jQuery和Vue实现的过程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;jQuery是一个DOM操作库，其核心就是通过JavaScript大量地操作了DOM结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;txt-title&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn-submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;submit&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ul-list&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>前端面试每日一题【不断更新中。。。】</title>
    <link href="http://yoursite.com/2018/04/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E3%80%90%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%E3%80%82%E3%80%82%E3%80%82%E3%80%91/"/>
    <id>http://yoursite.com/2018/04/26/前端面试每日一题【不断更新中。。。】/</id>
    <published>2018-04-26T13:59:47.000Z</published>
    <updated>2018-04-27T05:45:54.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一天2018-04-26"><a class="markdownIt-Anchor" href="#第一天2018-04-26"></a> 第一天：2018-04-26</h2><h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3><blockquote><p>写一个execTime，参数：事件毫秒数，作用：什么都不做，但函数执行会耗时参数传递的毫秒数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTime</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 补全代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>) <span class="comment">// 输出1</span></span><br><span class="line">execTime(<span class="number">3000</span>) <span class="comment">// 运行三秒钟</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>) <span class="comment">// 三秒钟之后输出2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="答案"><a class="markdownIt-Anchor" href="#答案"></a> 答案</h3><blockquote><p>JavaScript没有阻塞，所以思路就是使用一个<code>循环</code>强行阻塞</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTime</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">// getTime 让date转化为时间戳</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &lt; endTime + t) &#123;</span><br><span class="line">    <span class="comment">// 当前时间 小于 结束时间+t</span></span><br><span class="line">    <span class="comment">// 就会一直在循环</span></span><br><span class="line">    <span class="comment">// 从而实现了强制阻塞</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二天2018-04-27"><a class="markdownIt-Anchor" href="#第二天2018-04-27"></a> 第二天：2018-04-27</h2><h3 id="题目-2"><a class="markdownIt-Anchor" href="#题目-2"></a> 题目</h3><blockquote><p>写一个execTime，参数t：事件毫秒数，参数callback：回调函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTime</span>(<span class="params">t, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 补全代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">execTime(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 执行结果为：立即输出1和2，3秒后输出3</span></span><br></pre></td></tr></table></figure><h3 id="答案-2"><a class="markdownIt-Anchor" href="#答案-2"></a> 答案</h3><blockquote><p>这题应该是相当简单了，一看就是<code>异步</code>，又有一个回调，肯定使用setTimeout</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTime</span>(<span class="params">t, callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(callback, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一天2018-04-26&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一天2018-04-26&quot;&gt;&lt;/a&gt; 第一天：2018-04-26&lt;/h2&gt;
&lt;h3 id=&quot;题目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目&quot;&gt;&lt;/a&gt; 题目&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;写一个execTime，参数：事件毫秒数，作用：什么都不做，但函数执行会耗时参数传递的毫秒数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execTime&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;t&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 补全代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 输出1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;execTime(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 运行三秒钟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 三秒钟之后输出2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Canvas学习笔记(一)</title>
    <link href="http://yoursite.com/2018/04/25/Canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://yoursite.com/2018/04/25/Canvas学习笔记(一)/</id>
    <published>2018-04-25T14:16:47.000Z</published>
    <updated>2018-04-26T13:21:56.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一个问题如何知道用户在画画呢"><a class="markdownIt-Anchor" href="#第一个问题如何知道用户在画画呢"></a> 第一个问题：如何知道用户在画画呢？</h2><p>以鼠标为例，我们只要知道<code>什么时候按下去</code>，<code>什么时候动</code>，<code>什么时候松开</code>就可以判断出用户是否在画画</p><p>使用<code>onmousedown</code>判断什么时候按下去<br>使用<code>onmousemove</code>判断什么时候动<br>使用<code>onmouseup</code>判断什么时候松开</p><a id="more"></a><blockquote><p>我们先用JavaScript模拟出Canvas的效果</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一个问题如何知道用户在画画呢&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一个问题如何知道用户在画画呢&quot;&gt;&lt;/a&gt; 第一个问题：如何知道用户在画画呢？&lt;/h2&gt;
&lt;p&gt;以鼠标为例，我们只要知道&lt;code&gt;什么时候按下去&lt;/code&gt;，&lt;code&gt;什么时候动&lt;/code&gt;，&lt;code&gt;什么时候松开&lt;/code&gt;就可以判断出用户是否在画画&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;onmousedown&lt;/code&gt;判断什么时候按下去&lt;br&gt;
使用&lt;code&gt;onmousemove&lt;/code&gt;判断什么时候动&lt;br&gt;
使用&lt;code&gt;onmouseup&lt;/code&gt;判断什么时候松开&lt;/p&gt;
    
    </summary>
    
      <category term="Canvas" scheme="http://yoursite.com/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="http://yoursite.com/tags/Canvas/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>浅析Vue中computed与method的区别</title>
    <link href="http://yoursite.com/2018/04/25/%E6%B5%85%E6%9E%90Vue%E4%B8%ADcomputed%E4%B8%8Emethod%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/04/25/浅析Vue中computed与method的区别/</id>
    <published>2018-04-24T18:13:57.719Z</published>
    <updated>2018-04-24T18:13:57.719Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实官方文档对这个已经说的很清楚了，笔者不过是在其基础上进行归纳总结，各位看官还是先去<a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">读一下官方文档</a>吧</p></blockquote><h2 id="1computed区别于method的两个核心"><a class="markdownIt-Anchor" href="#1computed区别于method的两个核心"></a> 1.computed区别于method的两个核心</h2><p>在官方文档中，强调了computed区别于method最重要的两点</p><ol><li>computed是<strong>属性调用</strong>，而methods是<strong>函数调用</strong></li><li>computed带有<strong>缓存功能</strong>，而methods不是<br>OK，下面我们看一个具体的例子</li></ol><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>&#123;&#123;methodTest&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test2-1"</span>&gt;</span>&#123;&#123;methodTest()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test2-2"</span>&gt;</span>&#123;&#123;methodTest()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test2-3"</span>&gt;</span>&#123;&#123;methodTest()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test3-1"</span>&gt;</span>&#123;&#123;computedTest&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test3-2"</span>&gt;</span>&#123;&#123;computedTest&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--script部分--&gt;</span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'我是消息，'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    methodTest() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message + <span class="string">'现在我用的是methods'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    computedTest() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message + <span class="string">'现在我用的是computed'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-computed的属性调用"><a class="markdownIt-Anchor" href="#2-computed的属性调用"></a> 2. computed的属性调用</h2><p>细心的朋友可能已经发现了，在<code>HTML</code>的插值里</p><ol><li>computed定义的方法我们是以属性访问的形式调用的<code>computedTest</code></li><li>但是methods定义的方法，我们必须要加上<code>()</code>来调用，如<code>methodTest()</code>，<strong>否则，视图会出现<code>test1</code>的情况</strong>，见下图<br><img src="https://segmentfault.com/img/bV8UtL" alt="clipboard.png"></li></ol><h2 id="3-computed的缓存功能"><a class="markdownIt-Anchor" href="#3-computed的缓存功能"></a> 3. computed的缓存功能</h2><p>首先，我们要明白<strong>缓存</strong>究竟有什么用？<br>相比大家都知道<code>HTTP缓存</code>，其核心作用就是<strong>对一些服务端未更新的资源进行复用，避免一些无谓的请求，优化了用户的体验</strong></p><blockquote><p>对于computed也是一样的：</p></blockquote><p>在上面的例子中，<code>methods</code>定义的方法是以<strong>函数调用</strong>的形式来访问的，那么<code>test2-1,test2-2,test2-3</code>是<strong>反复地将<code>methodTest</code>方法运行了三遍</strong>，如果我们碰到一个场景，需要1000个<code>methodTest的返回值</code>，那么毫无疑问，这势必造成大量的<strong>浪费</strong><br>更恐怖的是，如果你更改了message的值，那么这1000个<code>methodTest</code>方法每一个又会重新计算。。。。</p><p>所以，官方文档才反复强调<strong>对于任何复杂逻辑，你都应当使用<code>计算属性</code></strong></p><blockquote><p><strong>computed依赖于data中的数据，只有在它的相关依赖数据发生改变时才会重新求值</strong></p></blockquote><p>如上例，在Vue实例化的时候，computed定义computedTest方法会做一次计算，返回一个值，<strong>在随后的代码编写中，只要<code>computedTest方法</code>依赖的<code>message数据</code>不发生改变，<code>computedTest方法</code>是不会重新计算的</strong>，也就是说<code>test3-1,test3-2</code>是直接拿到了<strong>返回值</strong>，而非是computedTest方法重新计算的结果。</p><p>这样的好处也是显而易见的，同样的，如果我们碰到一个场景，需要1000个<code>computedTest的返回值</code>，那么毫无疑问，这相对于<code>methods</code>而言，将大大地节约内存<br>哪怕你改变了message的值，<code>computedTest</code>也只会计算一次而已</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实官方文档对这个已经说的很清楚了，笔者不过是在其基础上进行归纳总结，各位看官还是先去&lt;a href=&quot;https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;读一下官方文档&lt;/a&gt;吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1computed区别于method的两个核心&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1computed区别于method的两个核心&quot;&gt;&lt;/a&gt; 1.computed区别于method的两个核心&lt;/h2&gt;
&lt;p&gt;在官方文档中，强调了computed区别于method最重要的两点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;computed是&lt;strong&gt;属性调用&lt;/strong&gt;，而methods是&lt;strong&gt;函数调用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;computed带有&lt;strong&gt;缓存功能&lt;/strong&gt;，而methods不是&lt;br&gt;
OK，下面我们看一个具体的例子&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="computed" scheme="http://yoursite.com/tags/computed/"/>
    
  </entry>
  
</feed>
